/*
 *  Copyright (c) 2012 Daniel Huckaby
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package com.handlerexploit.recoveryflasher.utils;

import java.io.File;
import java.net.URLEncoder;

import org.apache.commons.codec.copy.digest.DigestUtils;

import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.os.Environment;
import android.support.v4.content.LocalBroadcastManager;

import com.handlerexploit.recoveryflasher.models.Recovery;
import com.handlerexploit.recoveryflasher.services.DownloadService;
import com.handlerexploit.recoveryflasher.services.DownloadService.Status;

public class DownloadUtils {
    
    /**
     * Register a {@code BroadcastReceiver} with the
     * {@link LocalBroadcastManager} in conjunction with the
     * {@link DownloadService}.
     */
    public static void registerLocalReceiver(Context context, Recovery recovery, BroadcastReceiver broadcastReceiver) {
        IntentFilter intentFilter = new IntentFilter();
        intentFilter.addAction(recovery.getTitle());
        LocalBroadcastManager.getInstance(context).registerReceiver(broadcastReceiver, intentFilter);
    }
    
    /**
     * Unregister a previously registered {@code BroadcastReceiver} with the
     * {@link LocalBroadcastManager}.
     */
    public static void unregisterLocalReceiver(Context context, BroadcastReceiver broadcastReceiver) {
        LocalBroadcastManager.getInstance(context).unregisterReceiver(broadcastReceiver);
    }
    
    /**
     * Notify all registered BroadcastReceivers if the provided
     * {@link Recovery} is in the {@link Status.COMPLETE} or
     * {@link Status.PENDING} state.
     */
    public static void notifyStatus(Context context, Recovery recovery) {
        if (getDownloadPath(recovery).exists()) {
            updateProgress(context, recovery, 0, Status.COMPLETE);
        } else if (DownloadService.isPending(recovery)) {
            updateProgress(context, recovery, 0, Status.PENDING);
        }
    }
    
    /**
     * Initialize the download of the provided {@link Recovery} with the
     * {@link DownloadService}.
     */
    public static void startDownload(Context context, Recovery recovery) {
        Intent intent = new Intent(context, DownloadService.class);
        intent.putExtra(DownloadService.EXTRA_RECOVERY, recovery);
        context.startService(intent);
    }
    
    /**
     * Notify all registered BroadcastReceivers that the provided
     * {@link Recovery} has updated its download progress.
     */
    public static void updateProgress(Context context, Recovery recovery, int progress, Status status) {
        Intent intent = new Intent(recovery.getTitle());
        intent.putExtra(DownloadService.EXTRA_RECOVERY, recovery);
        intent.putExtra(DownloadService.EXTRA_PROGRESS, progress);
        intent.putExtra(DownloadService.EXTRA_STATUS, status);
        LocalBroadcastManager.getInstance(context).sendBroadcast(intent);
    }

    /**
     * Return the optimal download file path associated with the provided
     * {@link Recovery}.
     */
    public static File getDownloadPath(Recovery recovery) {
        String downloadDirectory = Environment.getExternalStorageDirectory().getAbsolutePath() + "/Download/";
        String fileName = recovery.getTitle().trim().replace(' ', '_') + "-" + DigestUtils.sha256Hex(recovery.getDownloadUrl()).substring(0, 10) + ".img";
        return new File(downloadDirectory, URLEncoder.encode(fileName));
    }
}