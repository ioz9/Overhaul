package com.handlerexploit.recoveryflasher.utils;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.lang.ref.WeakReference;
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

import org.apache.commons.io.copy.FileUtils;
import org.apache.commons.io.copy.IOUtils;

import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.os.Handler;

public class ImageManager {
    
    private static ImageManager sInstance;
    
    private Handler mHandler = new Handler();
    
    private ExecutorService mExecutorService = Executors.newCachedThreadPool();
    
    private Map<File, WeakReference<Bitmap>> mWeakBitmapMap = new HashMap<File, WeakReference<Bitmap>>();
    
    private ImageManager() {
        super();
    }
    
    public static ImageManager getInstance() {
        if (sInstance == null) {
            sInstance = new ImageManager();
        }
        return sInstance;
    }
    
    public void get(final File file, final OnImageRecievedListener onImageRecievedListener) {
        if (file == null || onImageRecievedListener == null) return;
        
        WeakReference<Bitmap> weakBitmap = mWeakBitmapMap.get(file);
        if (weakBitmap != null) {
            Bitmap bitmap = weakBitmap.get();
            if (bitmap != null) {
                onImageRecievedListener.onImageReceived(file, bitmap);
                return;
            }
        }

        mExecutorService.execute(new Runnable() {
            public void run() {
                try {
                    byte[] data = IOUtils.toByteArray(FileUtils.openInputStream(file));
                    final Bitmap bitmap = BitmapFactory.decodeByteArray(data, 0, data.length);
                    mHandler.post(new Runnable() {
                        public void run() {
                            mWeakBitmapMap.put(file, new WeakReference<Bitmap>(bitmap));
                            onImageRecievedListener.onImageReceived(file, bitmap);
                        }
                    });
                } catch (FileNotFoundException e) {
                    e.printStackTrace();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        });
    }
    
    public static interface OnImageRecievedListener {
        public void onImageReceived(File file, Bitmap bitmap);
    }
}