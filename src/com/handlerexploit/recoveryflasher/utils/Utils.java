package com.handlerexploit.recoveryflasher.utils;

import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.UnsupportedEncodingException;
import java.lang.reflect.Method;
import java.net.URL;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;

import android.view.View;

public class Utils {
    
    public static File downloadToFile(String url, String downloadDirectory) throws IOException {
        String fileName = obfuscateString(url);
        if (fileName != null) {
            String filePath = downloadDirectory + fileName;
            File file = new File(filePath);
            if (!file.exists()) {
                copyURLToFile(new URL(url), file);
            }
            return file;
        }
        return null;
    }
    
    public static void disableOverscrollMode(View view) {
        try {
            int OVER_SCROLL_NEVER = View.class.getField("OVER_SCROLL_NEVER").getInt(null);
            Method setOverScrollMode = View.class.getMethod("setOverScrollMode", new Class[] {Integer.TYPE});
            if (setOverScrollMode != null) {
                setOverScrollMode.invoke(view, OVER_SCROLL_NEVER);
            }
        } catch (Exception ignore) {
            // It either works or it doesn't, there's no reason to care if it doesn't.
        }
    }

    public static byte[] toByteArray(InputStream input) throws IOException {
        ByteArrayOutputStream output = new ByteArrayOutputStream();
        copy(input, output);
        return output.toByteArray();
    }
    
    private static void copyURLToFile(URL source, File destination) throws IOException {
        if (destination.getParentFile() != null && !destination.getParentFile().exists()) {
            destination.getParentFile().mkdirs();
        }

        if (destination.exists() && !destination.canWrite()) {
            String message = "Unable to open file " + destination + " for writing.";
            throw new IOException(message);
        }

        InputStream input = source.openStream();
        try {
            FileOutputStream output = new FileOutputStream(destination);
            try {
                copy(input, output);
            } finally {
                if (output != null) {
                    try {
                        output.close();
                    } catch (IOException ignore) {}
                }
            }
        } finally {
            if (input != null) {
                try {
                    input.close();
                } catch (IOException ignore) {}
            }
        }
    }
    
    private static int copy(InputStream input, OutputStream output) throws IOException {
        byte[] buffer = new byte[1024 * 4];
        long count = 0;
        int n = 0;
        while (-1 != (n = input.read(buffer))) {
            output.write(buffer, 0, n);
            count += n;
        }
        return (int) count;
    }
    
    private static String obfuscateString(String value) {
        try {
            byte[] data = MessageDigest.getInstance("SHA1").digest(value.getBytes("UTF-8"));
            String result = new String();
            for (int i = 0; i < data.length; i++) {
                result += Integer.toString((data[i] & 0xff) + 0x100, 16).substring(1);
            }
            return result.toUpperCase();
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        } catch (UnsupportedEncodingException e) {
            e.printStackTrace();
        }
        return null;
    }
}