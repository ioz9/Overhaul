package com.handlerexploit.recoveryflasher.utils;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.net.URL;

import org.apache.commons.codec.copy.digest.DigestUtils;
import org.apache.commons.io.copy.FileUtils;
import org.apache.commons.io.copy.IOUtils;
import org.apache.http.ParseException;
import org.apache.http.client.ClientProtocolException;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import android.content.Context;
import android.os.Environment;

import com.handlerexploit.recoveryflasher.MainActivity.Device;
import com.handlerexploit.recoveryflasher.models.ExtendedDevice;
import com.handlerexploit.recoveryflasher.models.Recovery;

public class Parser {
    
    private String downloadDirectory;
    
    public Parser(Context context) {
        downloadDirectory = Environment.getDataDirectory().getPath() + "/data/" + context.getPackageName() + "/cache/";
    }
    
    public ExtendedDevice requestExtendedDevice(Device device) {
        ExtendedDevice extendedDevice = new ExtendedDevice(device);
        try {
            
            File cachedResponse = new File(getDownloadPath(device.getUrl(), downloadDirectory));
            if (isExpired(cachedResponse)) {
                cachedResponse = downloadToFile(device.getUrl(), downloadDirectory);
            }
            
            String rawJson = IOUtils.toString(new FileInputStream(cachedResponse));
            JSONObject root = new JSONObject(rawJson);
            JSONArray recoverylist = root.getJSONArray("recoverylist");
            for (int i = 0; i < recoverylist.length(); i++) {
                JSONObject jsonObject = recoverylist.getJSONObject(i);
                
                Recovery recovery = new Recovery();
                recovery.setTitle(jsonObject.getString("title"));
                recovery.setDesc(jsonObject.getString("desc"));
                recovery.setIconUrl(jsonObject.getString("icon_url"));
                recovery.setIcon(downloadToFile(recovery.getIconUrl(), downloadDirectory));
                recovery.setUrl(jsonObject.getString("url"));
                
                extendedDevice.addRecovery(recovery);
            }
        } catch (ParseException e) {
            e.printStackTrace();
        } catch (ClientProtocolException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        } catch (JSONException e) {
            e.printStackTrace();
        }
        return extendedDevice;
    }
    
    private static String getDownloadPath(String url, String downloadDirectory) {
        return downloadDirectory + DigestUtils.sha256Hex(url);
    }
    
    private static boolean isExpired(File file) {
         return !file.exists() || file.exists() && System.currentTimeMillis() > file.lastModified() + 86400000;
    }
    
    private static File downloadToFile(String url, String downloadDirectory) throws IOException {
        String filePath = getDownloadPath(url, downloadDirectory);
        if (filePath != null) {
            File file = new File(filePath);
            if (isExpired(file)) {
                FileUtils.copyURLToFile(new URL(url), file);
            }
            return file;
        }
        return null;
    }
}