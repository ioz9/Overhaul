/*
 *  Copyright (c) 2012 Daniel Huckaby
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package com.handlerexploit.recoveryflasher.utils;

import java.io.File;
import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URL;

import org.apache.commons.codec.copy.digest.DigestUtils;
import org.apache.commons.io.copy.FileUtils;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import android.content.Context;
import android.os.Environment;

import com.handlerexploit.recoveryflasher.activities.DevicesActivity.Device;
import com.handlerexploit.recoveryflasher.models.ExtendedDevice;
import com.handlerexploit.recoveryflasher.models.Recovery;

public class Parser {
    
    private static final int DAY_IN_MILLIS = 86400000;
    
    private String mDownloadDirectory;
    
    private boolean mForceExpire;
    
    public Parser(Context context) {
        this(context, false);
    }
    
    public Parser(Context context, boolean forceExpire) {
        mDownloadDirectory = Environment.getDataDirectory().getAbsolutePath() + "/data/" + context.getPackageName() + "/cache/";
        mForceExpire = forceExpire;
    }
    
    public ExtendedDevice requestExtendedDevice(Device device) {
        ExtendedDevice extendedDevice = new ExtendedDevice(device);
        try {
            String rawJson = FileUtils.readFileToString(getFile(device.getUrl()));
            JSONObject root = new JSONObject(rawJson);
            JSONArray recoverylist = root.getJSONArray("recoverylist");
            for (int i = 0; i < recoverylist.length(); i++) {
                JSONObject jsonObject = recoverylist.getJSONObject(i);
                
                Recovery recovery = new Recovery();
                recovery.setTitle(jsonObject.getString("title"));
                recovery.setDescription(jsonObject.getString("desc"));
                recovery.setIconUrl(jsonObject.getString("icon_url"));
                recovery.setThumbnailIcon(getFile(recovery.getIconUrl()));
                recovery.setDownloadUrl(jsonObject.getString("url"));
                
                extendedDevice.addRecovery(recovery);
            }
        } catch (IOException e) {
            e.printStackTrace();
        } catch (JSONException e) {
            e.printStackTrace();
        }
        return extendedDevice;
    }
    
    public boolean isExpired(String url) {
        return isExpired(getFilePath(url));
    }
    
    public File getFile(String url) {
        File file = getFilePath(url);
        File tempFile = new File(file.getAbsolutePath() + ".tmp");
        if (mForceExpire || isExpired(file)) {
            Exception exception = null;
            try {
                FileUtils.copyURLToFile(new URL(url), tempFile);
                FileUtils.deleteQuietly(file);
                FileUtils.moveFile(tempFile, file);
            } catch (MalformedURLException e) {
                exception = e;
            } catch (IOException e) {
                exception = e;
            } finally {
                if (exception != null) {
                    FileUtils.deleteQuietly(tempFile);
                    exception.printStackTrace();
                }
            }
        }
        return file;
    }
    
    private File getFilePath(String url) {
        return new File(mDownloadDirectory, DigestUtils.sha256Hex(url));
    }
    
    private boolean isExpired(File file) {
         return !file.exists() || file.exists() && System.currentTimeMillis() > file.lastModified() + DAY_IN_MILLIS;
    }
}