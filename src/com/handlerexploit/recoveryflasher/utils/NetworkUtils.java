/*
 *  Copyright (c) 2012 Daniel Huckaby
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package com.handlerexploit.recoveryflasher.utils;

import static org.apache.commons.io.copy.FileUtils.deleteQuietly;
import static org.apache.commons.io.copy.FileUtils.moveFile;
import static org.apache.commons.io.copy.FileUtils.openOutputStream;
import static org.apache.commons.io.copy.IOUtils.closeQuietly;
import static org.apache.commons.io.copy.IOUtils.copy;

import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.URL;
import java.net.URLConnection;

import org.apache.commons.io.copy.output.CountingOutputStream;

public class NetworkUtils {
    
    /**
     * Copies bytes from the URL source to a file destination. Provides listener
     * for download progress.
     */
    public static void copyURLToFile(String source, File destination, final OnCountingOutputStreamListener listener) {
        File tempFile = new File(destination.getAbsolutePath() + ".tmp");
        
        try {
            deleteQuietly(tempFile);
            
            InputStream input = null;
            OutputStream output = null;
            try {
                final URLConnection urlConnection = new URL(source).openConnection();

                input = urlConnection.getInputStream();
                output = new CountingOutputStream(openOutputStream(tempFile)) {
                    
                    int contentLength = urlConnection.getContentLength();
                    int currentProgress = 0;
                    
                    @Override
                    protected void afterWrite(int n) throws IOException {
                        super.afterWrite(n);

                        int progress = (int) (getCount() * 100 / contentLength);
                        if (progress > currentProgress) {
                            currentProgress = progress;
                            if (listener != null) {
                                listener.onProgressUpdate(progress);
                            }
                        }
                    }
                };
                
                copy(input, output);
            } finally {
                closeQuietly(input);
                closeQuietly(output);
            }
        } catch (IOException e) {
            deleteQuietly(tempFile);
        } finally {
            if (tempFile.exists()) {
                deleteQuietly(destination);
                try {
                    moveFile(tempFile, destination);
                } catch (IOException e) {
                    deleteQuietly(tempFile);
                    deleteQuietly(destination);
                }
            }
        }
    }
    
    public static interface OnCountingOutputStreamListener {
        public void onProgressUpdate(int progress);
    }
}