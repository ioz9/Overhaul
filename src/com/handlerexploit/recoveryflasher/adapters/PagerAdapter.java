package com.handlerexploit.recoveryflasher.adapters;

import java.lang.ref.WeakReference;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import android.os.Bundle;
import android.support.v4.app.Fragment;
import android.support.v4.app.FragmentActivity;
import android.support.v4.app.FragmentStatePagerAdapter;
import android.support.v4.view.ViewPager;
import android.support.v4.view.ViewPager.OnPageChangeListener;
import android.view.ViewGroup;

import com.handlerexploit.recoveryflasher.widgets.PagerHeader;
import com.handlerexploit.recoveryflasher.widgets.PagerHeader.OnHeaderClickListener;

public class PagerAdapter extends FragmentStatePagerAdapter implements OnPageChangeListener, OnHeaderClickListener {

    private Map<Integer, WeakReference<Fragment>> weakFragmentMap = new HashMap<Integer, WeakReference<Fragment>>();
    private List<Holder> holderList = new ArrayList<Holder>();
    
    private FragmentActivity fragmentActivity;
    private ViewPager viewPager;
    private PagerHeader pagerHeader;

    public PagerAdapter(FragmentActivity fragmentActivity, ViewPager viewPager, PagerHeader pagerHeader) {
        super(fragmentActivity.getSupportFragmentManager());
        
        viewPager.setAdapter(this);
        viewPager.setOnPageChangeListener(this);
        pagerHeader.setOnHeaderClickListener(this);
        
        this.fragmentActivity = fragmentActivity;
        this.viewPager = viewPager;
        this.pagerHeader = pagerHeader;
    }

    public void add(Class<? extends Fragment> className, Bundle params, String label) {
        Holder holder = new Holder();
        holder.className = className.getName();
        holder.params = params;

        int position = holderList.size();
        holderList.add(position, holder);
        pagerHeader.add(position, label);
        notifyDataSetChanged();
    }

    public Fragment getFragment(int position) {
        WeakReference<Fragment> weakFragment = weakFragmentMap.get(position);
        if (weakFragment != null && weakFragment.get() != null) {
            return weakFragment.get();
        } else {
            return getItem(position);
        }
    }

    @Override
    public Fragment getItem(int position) {
        Holder currentHolder = holderList.get(position);
        Fragment fragment = Fragment.instantiate(fragmentActivity, currentHolder.className, currentHolder.params);

        WeakReference<Fragment> weakFragment = weakFragmentMap.get(position);
        if (weakFragment != null) {
            weakFragment.clear();
        }
        weakFragmentMap.put(position, new WeakReference<Fragment>(fragment));

        return fragment;
    }

    @Override
    public void destroyItem(ViewGroup container, int position, Object object) {
        super.destroyItem(container, position, object);
        WeakReference<Fragment> weakFragment = weakFragmentMap.get(position);
        if (weakFragment != null) {
            weakFragment.clear();
        }
    }

    @Override
    public int getCount() {
        return holderList.size();
    }

    private class Holder {
        String className;
        Bundle params;
    }

    @Override
    public void onPageScrollStateChanged(int arg0) {
        // Ignore
    }

    @Override
    public void onPageScrolled(int position, float positionOffset, int positionOffsetPixels) {
        pagerHeader.setPosition(position, positionOffset, positionOffsetPixels);
    }

    @Override
    public void onPageSelected(int position) {
        pagerHeader.setDisplayedPage(position);
    }

    @Override
    public void onHeaderClicked(int position) {
        // Ignore
    }

    @Override
    public void onHeaderSelected(int position) {
        viewPager.setCurrentItem(position);
    }
}