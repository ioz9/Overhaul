package com.handlerexploit.recoveryflasher.adapters;

import java.lang.ref.WeakReference;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import android.os.Bundle;
import android.support.v4.app.Fragment;
import android.support.v4.app.FragmentActivity;
import android.support.v4.app.FragmentStatePagerAdapter;
import android.view.ViewGroup;

public class PagerAdapter extends FragmentStatePagerAdapter {

    private Map<Integer, WeakReference<Fragment>> weakFragmentMap = new HashMap<Integer, WeakReference<Fragment>>();
    private List<Holder> holderList = new ArrayList<Holder>();
    private FragmentActivity fragmentActivity;

    public PagerAdapter(FragmentActivity fragmentActivity) {
        super(fragmentActivity.getSupportFragmentManager());
        this.fragmentActivity = fragmentActivity;
    }

    public void add(Class<? extends Fragment> className, Bundle params) {
        Holder holder = new Holder();
        holder.className = className.getName();
        holder.params = params;

        int position = holderList.size();
        holderList.add(position, holder);
        notifyDataSetChanged();
    }

    public Fragment getFragment(int position) {
        WeakReference<Fragment> weakFragment = weakFragmentMap.get(position);
        if (weakFragment != null && weakFragment.get() != null) {
            return weakFragment.get();
        } else {
            return getItem(position);
        }
    }

    @Override
    public Fragment getItem(int position) {
        Holder currentHolder = holderList.get(position);
        Fragment fragment = Fragment.instantiate(fragmentActivity, currentHolder.className, currentHolder.params);

        WeakReference<Fragment> weakFragment = weakFragmentMap.get(position);
        if (weakFragment != null) {
            weakFragment.clear();
        }
        weakFragmentMap.put(position, new WeakReference<Fragment>(fragment));

        return fragment;
    }

    @Override
    public void destroyItem(ViewGroup container, int position, Object object) {
        super.destroyItem(container, position, object);
        WeakReference<Fragment> weakFragment = weakFragmentMap.get(position);
        if (weakFragment != null) {
            weakFragment.clear();
        }
    }

    @Override
    public int getCount() {
        return holderList.size();
    }

    private class Holder {
        String className;
        Bundle params;
    }
}