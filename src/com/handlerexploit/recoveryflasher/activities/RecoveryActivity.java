/*
 *  Copyright (c) 2012 Daniel Huckaby
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package com.handlerexploit.recoveryflasher.activities;

import java.io.File;

import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.graphics.Bitmap;
import android.os.Bundle;
import android.support.v4.app.FragmentActivity;
import android.view.View;
import android.view.View.OnClickListener;
import android.widget.Button;
import android.widget.ImageView;
import android.widget.ProgressBar;
import android.widget.TextView;

import com.handlerexploit.recoveryflasher.R;
import com.handlerexploit.recoveryflasher.models.Recovery;
import com.handlerexploit.recoveryflasher.services.DownloadService;
import com.handlerexploit.recoveryflasher.utils.ImageManager;
import com.handlerexploit.recoveryflasher.utils.ImageManager.OnImageRecievedListener;

public class RecoveryActivity extends FragmentActivity {

    public static final String EXTRA_RECOVERY = "recovery";
    
    private Recovery mRecovery;
    
    private Button mDownloadButton;
    
    private ProgressBar mDownloadProgress;

    private BroadcastReceiver mBroadcastReceiver = new BroadcastReceiver() {
        public void onReceive(Context context, Intent intent) {
            int progress = intent.getIntExtra(DownloadService.EXTRA_PROGRESS, 0);
            boolean meta = intent.getBooleanExtra(DownloadService.EXTRA_META, false);
            Recovery recovery = (Recovery) intent.getSerializableExtra(DownloadService.EXTRA_RECOVERY);
            if (recovery.getDownloadUrl().equals(mRecovery.getDownloadUrl())) {
                updateProgress(progress, meta);
            }
        }
    };
    
    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_recovery);
        mRecovery = (Recovery) getIntent().getExtras().getSerializable(EXTRA_RECOVERY);
        setupViews();
    }
    
    @Override
    public void onResume() {
        super.onResume();
        registerReceiver();
        requestRecovery(false);
    }
    
    @Override
    public void onPause() {
        super.onPause();
        unregisterReceiver();
    }
    
    private void registerReceiver() {
        IntentFilter intentFilter = new IntentFilter();
        intentFilter.addAction(DownloadService.BROADCAST_PROGRESS_UPDATE);
        registerReceiver(mBroadcastReceiver, intentFilter);
    }
    
    private void unregisterReceiver() {
        unregisterReceiver(mBroadcastReceiver);
    }
    
    private void requestRecovery(boolean shouldDownload) {
        Intent intent = new Intent(RecoveryActivity.this, DownloadService.class);
        intent.putExtra(DownloadService.EXTRA_RECOVERY, mRecovery);
        intent.putExtra(DownloadService.EXTRA_META, shouldDownload);
        startService(intent);
    }
    
    private void updateProgress(int progress, boolean meta) {
        mDownloadProgress.setProgress(progress);
        if (progress < 0) {
            if (!mDownloadProgress.isIndeterminate()) {
                mDownloadProgress.setIndeterminate(true);
                mDownloadProgress.invalidate();
            }
            
            if (mDownloadButton.isEnabled()) {
                mDownloadButton.setEnabled(false);
            }
        } else if (progress > 0) {
            if (mDownloadProgress.isIndeterminate()) {
                mDownloadProgress.setIndeterminate(false);
                mDownloadProgress.invalidate();
            }
            
            if (mDownloadButton.isEnabled()) {
                mDownloadButton.setEnabled(false);
            }
        } else if (meta) {
            if (mDownloadProgress.isIndeterminate()) {
                mDownloadProgress.setIndeterminate(false);
                mDownloadProgress.invalidate();
            }
            
            if (!mDownloadButton.isEnabled()) {
                mDownloadButton.setEnabled(false);
            }
        } else {
            if (mDownloadProgress.isIndeterminate()) {
                mDownloadProgress.setIndeterminate(false);
                mDownloadProgress.invalidate();
            }
            
            if (!mDownloadButton.isEnabled()) {
                mDownloadButton.setEnabled(true);
            }
        }
    }
    
    private void setupViews() {
        TextView title = (TextView) findViewById(R.id.title);
        title.setText(mRecovery.getTitle().toUpperCase());
        
        TextView description = (TextView) findViewById(R.id.description);
        description.setText(mRecovery.getDescription());
        
        mDownloadProgress = (ProgressBar) findViewById(R.id.downloadProgress);
        mDownloadProgress.setMax(100);
        
        mDownloadButton = (Button) findViewById(R.id.download);
        mDownloadButton.setOnClickListener(new OnClickListener() {
            public void onClick(View v) {
                requestRecovery(true);
            }
        });

        ImageManager.getInstance().get(mRecovery.getThumbnailIcon(), new OnImageRecievedListener() {
            public void onImageReceived(File file, Bitmap bitmap) {
                ImageView icon = (ImageView) findViewById(R.id.icon);
                icon.setImageBitmap(bitmap);
            }
        });
    }
}