/*
 *  Copyright (c) 2012 Daniel Huckaby
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package com.handlerexploit.recoveryflasher.fragments;

import java.util.List;

import android.app.Activity;
import android.content.Context;
import android.content.Intent;
import android.os.Bundle;
import android.support.v4.app.ListFragment;
import android.support.v4.app.LoaderManager.LoaderCallbacks;
import android.support.v4.content.AsyncTaskLoader;
import android.support.v4.content.Loader;
import android.view.View;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemClickListener;
import android.widget.ListView;

import com.handlerexploit.recoveryflasher.activities.DevicesActivity;
import com.handlerexploit.recoveryflasher.activities.DevicesActivity.Device;
import com.handlerexploit.recoveryflasher.activities.RecoveryActivity;
import com.handlerexploit.recoveryflasher.adapters.RecoveryAdapter;
import com.handlerexploit.recoveryflasher.models.ExtendedDevice;
import com.handlerexploit.recoveryflasher.models.Recovery;
import com.handlerexploit.recoveryflasher.services.DownloadService;
import com.handlerexploit.recoveryflasher.utils.Parser;

public class DeviceFragment extends ListFragment implements OnItemClickListener, LoaderCallbacks<List<Recovery>> {
    
    public static final String EXTRA_DEVICE = "device";
    
    @Override
    public void onActivityCreated(Bundle savedInstanceState) {
        super.onActivityCreated(savedInstanceState);
        getLoaderManager().initLoader(0, getArguments(), this);
    }
    
    @Override
    public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
        Intent intent = new Intent(view.getContext(), RecoveryActivity.class);
        intent.putExtra(DownloadService.EXTRA_RECOVERY, (Recovery) parent.getItemAtPosition(position));
        startActivity(intent);
    }

    @Override
    public Loader<List<Recovery>> onCreateLoader(int arg0, Bundle arg1) {
        Device device = Device.valueOf(arg1.getString(EXTRA_DEVICE));
        return new ExtendedDeviceLoader(getActivity(), device);
    }

    @Override
    public void onLoadFinished(Loader<List<Recovery>> arg0, List<Recovery> arg1) {
        Activity activitiy = getActivity();
        if (activitiy != null && !activitiy.isFinishing()) {
            ListView listView = getListView();
            listView.setOnItemClickListener(DeviceFragment.this);
            DevicesActivity.disableOverscrollMode(listView);
            RecoveryAdapter recoveryAdapter = new RecoveryAdapter(activitiy, arg1);
            setListAdapter(recoveryAdapter);
        }
    }

    @Override
    public void onLoaderReset(Loader<List<Recovery>> arg0) {
        setListAdapter(null);
    }
    
    private static class ExtendedDeviceLoader extends AsyncLoader<List<Recovery>> {
        
        private Parser parser;
        private Device device;

        public ExtendedDeviceLoader(Context context, Device device) {
            super(context);
            parser = new Parser(context);
            this.device = device;
        }

        @Override
        public List<Recovery> loadInBackground() {
            ExtendedDevice extendedDevice = parser.requestExtendedDevice(device);
            return extendedDevice.getRecoveries();
        }
    }
    
    /**
     * Loader which extends AsyncTaskLoaders and handles caveats as pointed out in
     * http://code.google.com/p/android/issues/detail?id=14944.
     * 
     * Based on CursorLoader.java in the Fragment compatibility package
     * 
     * @author Alexander Blom (me@alexanderblom.se)
     * 
     * @param <D>
     *            data type
     */
    private static abstract class AsyncLoader<D> extends AsyncTaskLoader<D> {
        
        private D data;

        public AsyncLoader(Context context) {
            super(context);
        }

        @Override
        public void deliverResult(D data) {
            if (!isReset()) {
                this.data = data;
                super.deliverResult(data);
            } else {
                // An async query came in while the loader is stopped
            }
        }

        @Override
        protected void onStartLoading() {
            if (data != null) {
                deliverResult(data);
            } else if (takeContentChanged() || data == null) {
                forceLoad();
            }
        }

        @Override
        protected void onStopLoading() {
            // Attempt to cancel the current load task if possible.
            cancelLoad();
        }

        @Override
        protected void onReset() {
            super.onReset();
            // Ensure the loader is stopped
            onStopLoading();
            data = null;
        }
    }
}