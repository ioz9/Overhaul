package com.handlerexploit.recoveryflasher;

import java.io.IOException;
import java.net.MalformedURLException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.handlerexploit.recoveryflasher.models.ExtendedDevice;
import com.handlerexploit.recoveryflasher.models.Recovery;
import com.handlerexploit.recoveryflasher.utils.NetworkUtils;
import com.handlerexploit.recoveryflasher.utils.Parser;

import android.app.Activity;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.os.AsyncTask;
import android.os.Bundle;
import android.util.Log;

public class MainActivity extends Activity {
    
    private static final String TAG = MainActivity.class.getSimpleName();
    
    private static Map<String, Bitmap> bitmapCache = new HashMap<String, Bitmap>();

    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.main);
        
        new NetworkOperationsTask().execute(Device.values());
    }
    
    public static enum Device {
        CLIQ("Motorola Cliq", "http://dl.dropbox.com/u/788286/com.adlx.recoveryflasher/motorola.mb200.json"),
        CLIQXT("Motorola CliqXT", "http://dl.dropbox.com/u/788286/com.adlx.recoveryflasher/motorola.mb501.json");
        
        private String name;
        private String url;
        
        Device(String name, String url) {
            this.name = name;
            this.url = url;
        }
        
        public String getName() {
            return name;
        }
        
        public String getUrl() {
            return url;
        }
    }
    
    private static void precacheThumbnails(ExtendedDevice extendedDevice) {
        for (Recovery recovery : extendedDevice.getRecoveries()) {
            String url = recovery.getIconUrl();
            if (bitmapCache.get(url) == null) {
                try {
                    byte[] data = NetworkUtils.requestBinary(url);
                    bitmapCache.put(url, BitmapFactory.decodeByteArray(data, 0, data.length));
                } catch (MalformedURLException e) {
                    e.printStackTrace();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        }
    }
    
    private static class NetworkOperationsTask extends AsyncTask<Device, Void, List<ExtendedDevice>> {

        @Override
        protected List<ExtendedDevice> doInBackground(Device... params) {
            List<ExtendedDevice> extendedDevices = new ArrayList<ExtendedDevice>();
            for (Device device : params) {
                ExtendedDevice extendedDevice = Parser.requestExtendedDevice(device);
                
                precacheThumbnails(extendedDevice);
                
                extendedDevices.add(extendedDevice);
            }
            return extendedDevices;
        }
        
        @Override
        public void onPostExecute(List<ExtendedDevice> results) {
            for (ExtendedDevice extendedDevice : results) {
                Log.d(TAG, "Device : " + extendedDevice.getName() + ", number of recoveries retrieved is " + extendedDevice.getRecoveries().size());
            }
        }
    }
}