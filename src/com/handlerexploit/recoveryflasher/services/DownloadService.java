/*
 *  Copyright (c) 2012 Daniel Huckaby
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package com.handlerexploit.recoveryflasher.services;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.net.URL;
import java.net.URLConnection;
import java.util.ArrayList;
import java.util.List;

import org.apache.commons.io.copy.FileUtils;
import org.apache.commons.io.copy.IOUtils;

import android.app.IntentService;
import android.content.Intent;

import com.handlerexploit.recoveryflasher.activities.RecoveryActivity;
import com.handlerexploit.recoveryflasher.models.Recovery;
import com.handlerexploit.recoveryflasher.utils.DownloadUtils;

public class DownloadService extends IntentService {
    
    public static final String EXTRA_PROGRESS = "progress";
    public static final String EXTRA_STATUS = "status";
    
    private static List<String> sPendingDownloads = new ArrayList<String>();
    
    public static enum Status {
        PENDING,
        DOWNLOADING,
        COMPLETE;
    }

    public DownloadService() {
        super(DownloadService.class.getSimpleName());
    }
    
    @Override
    public void onStart(Intent intent, int startId) {
        Recovery recovery = (Recovery) intent.getSerializableExtra(RecoveryActivity.EXTRA_RECOVERY);

        synchronized (sPendingDownloads) {
            sPendingDownloads.add(recovery.getTitle());
        }
        
        DownloadUtils.getInstance(this).updateProgress(recovery, 0, Status.PENDING);
        super.onStart(intent, startId);
    }

    @Override
    protected void onHandleIntent(Intent intent) {
        Recovery recovery = (Recovery) intent.getSerializableExtra(RecoveryActivity.EXTRA_RECOVERY);

        String url = recovery.getDownloadUrl();
        File file = DownloadUtils.getInstance(this).getDownloadPath(recovery);
        File tempFile = new File(file.getAbsolutePath() + ".tmp");
        
        try {
            FileUtils.deleteQuietly(tempFile);
            
            URLConnection urlConnection = new URL(url).openConnection();
            InputStream input = urlConnection.getInputStream();
            int contentLength = urlConnection.getContentLength();
            
            try {
                FileOutputStream output = FileUtils.openOutputStream(tempFile);
                try {
                    byte[] buffer = new byte[1024 * 4];
                    long count = 0;
                    int n = 0;
                    
                    int currentProgress = 0;
                    while (-1 != (n = input.read(buffer))) {
                        output.write(buffer, 0, n);
                        count += n;
                        
                        int progress = (int) (count * 100 / contentLength);
                        if (progress > currentProgress) {
                            currentProgress = progress;
                            DownloadUtils.getInstance(this).updateProgress(recovery, currentProgress, Status.DOWNLOADING);
                        }
                    }
                } finally {
                    IOUtils.closeQuietly(output);
                }
            } finally {
                IOUtils.closeQuietly(input);
            }
        } catch (IOException e) {
            FileUtils.deleteQuietly(tempFile);
            e.printStackTrace();
        } finally {
            FileUtils.deleteQuietly(file);
            try {
                FileUtils.moveFile(tempFile, file);
            } catch (IOException e) {
                e.printStackTrace();
                FileUtils.deleteQuietly(tempFile);
                FileUtils.deleteQuietly(file);
            }
        }
        
        synchronized (sPendingDownloads) {
            sPendingDownloads.remove(recovery.getTitle());
        }
        
        DownloadUtils.getInstance(this).updateProgress(recovery, 0, Status.COMPLETE);
    }

    public static boolean isPending(Recovery recovery) {
        synchronized (sPendingDownloads) {
            return sPendingDownloads.contains(recovery.getTitle());
        }
    }
}