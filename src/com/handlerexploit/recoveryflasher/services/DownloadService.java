/*
 *  Copyright (c) 2012 Daniel Huckaby
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package com.handlerexploit.recoveryflasher.services;

import android.app.IntentService;
import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.support.v4.content.LocalBroadcastManager;
import android.util.Log;

import com.handlerexploit.recoveryflasher.activities.RecoveryActivity;
import com.handlerexploit.recoveryflasher.models.Recovery;

public class DownloadService extends IntentService {
    
    public static final String EXTRA_PROGRESS = "progress";
    public static final String EXTRA_STATUS = "status";
    
    public static enum Status {
        PENDING,
        DOWNLOADING,
        COMPLETE;
    }

    public DownloadService() {
        super(DownloadService.class.getSimpleName());
    }

    @Override
    protected void onHandleIntent(Intent intent) {
        Recovery recovery = (Recovery) intent.getSerializableExtra(RecoveryActivity.EXTRA_RECOVERY);
        
        Log.d("Daniel", "Downloading " + recovery.getTitle());
        
        /*try {
            String source = null;
            File updateProgress = null;
            
            URLConnection urlConnection = new URL(source).openConnection();
            InputStream input = urlConnection.getInputStream();
            int contentLength = urlConnection.getContentLength();
            
            try {
                FileOutputStream output = FileUtils.openOutputStream(updateProgress);
                try {
                    byte[] buffer = new byte[1024 * 4];
                    long count = 0;
                    int n = 0;
                    
                    int currentProgress = 0;

                    while (-1 != (n = input.read(buffer))) {
                        output.write(buffer, 0, n);
                        count += n;
                        
                        int progress = (int) (count * 100 / contentLength);
                        if (progress > currentProgress) {
                            currentProgress = progress;
                            DownloadService.updateProgress(this, recovery, currentProgress);
                        }
                    }
                } finally {
                    IOUtils.closeQuietly(output);
                }
            } finally {
                IOUtils.closeQuietly(input);
            }
        } catch (IOException e) {
            e.printStackTrace();
        }*/
    }
    
    public static void registerReceiver(Context context, BroadcastReceiver broadcastReceiver) {
        IntentFilter intentFilter = new IntentFilter();
        intentFilter.addAction(DownloadService.EXTRA_PROGRESS);
        LocalBroadcastManager.getInstance(context).registerReceiver(broadcastReceiver, intentFilter);
    }
    
    public static void unregisterReceiver(Context context, BroadcastReceiver broadcastReceiver) {
        LocalBroadcastManager.getInstance(context).unregisterReceiver(broadcastReceiver);
    }
    
    public static void startDownload(Context context, Recovery recovery) {
        Intent intent = new Intent(context, DownloadService.class);
        intent.putExtra(RecoveryActivity.EXTRA_RECOVERY, recovery);
        context.startService(intent);
    }
    
    public static void updateProgress(Context context, Recovery recovery, int progress, Status status) {
        Intent intent = new Intent(EXTRA_PROGRESS);
        intent.putExtra(RecoveryActivity.EXTRA_RECOVERY, recovery);
        intent.putExtra(DownloadService.EXTRA_PROGRESS, progress);
        intent.putExtra(DownloadService.EXTRA_STATUS, status);
        LocalBroadcastManager.getInstance(context).sendBroadcast(intent);
    }
}