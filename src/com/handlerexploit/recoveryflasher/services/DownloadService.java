package com.handlerexploit.recoveryflasher.services;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.net.URL;
import java.net.URLConnection;
import java.util.ArrayList;
import java.util.List;

import org.apache.commons.codec.copy.digest.DigestUtils;
import org.apache.commons.io.copy.FileUtils;
import org.apache.commons.io.copy.IOUtils;

import android.app.IntentService;
import android.content.Intent;
import android.os.Environment;

import com.handlerexploit.recoveryflasher.models.Recovery;

public class DownloadService extends IntentService {
    
    public static final String BROADCAST_PROGRESS_UPDATE = "progress_update";
    public static final String EXTRA_RECOVERY = "recovery";
    public static final String EXTRA_PROGRESS = "progress";
    public static final String EXTRA_META = "meta";
    
    private static List<String> sPendingList = new ArrayList<String>();
    
    public DownloadService() {
        super(DownloadService.class.getSimpleName());
    }
    
    @Override
    public void onStart(Intent intent, int startId) {
        Recovery recovery = (Recovery) intent.getSerializableExtra(EXTRA_RECOVERY);
        boolean shouldDownload = intent.getBooleanExtra(EXTRA_META, false);
        String downloadUrl = recovery.getDownloadUrl();
        
        Intent i = new Intent(BROADCAST_PROGRESS_UPDATE);
        i.putExtra(EXTRA_RECOVERY, recovery);
        if (shouldDownload) {
            i.putExtra(EXTRA_PROGRESS, -1);
            sendBroadcast(i);
            synchronized(sPendingList) {
                sPendingList.add(downloadUrl);
            }
            super.onStart(intent, startId);
        } else {
            synchronized(sPendingList) {
                if (sPendingList.contains(downloadUrl)) {
                    i.putExtra(EXTRA_PROGRESS, -1);
                } else {
                    File file = new File(Environment.getDataDirectory().getAbsolutePath() + "/data/" + getPackageName() + "/cache/", DigestUtils.sha256Hex(recovery.getDownloadUrl()));
                    i.putExtra(EXTRA_PROGRESS, file.exists() ? 100 : 0);
                }
                sendBroadcast(i);
            }
        }
    }

    @Override
    protected void onHandleIntent(Intent intent) {
        Recovery recovery = (Recovery) intent.getSerializableExtra(EXTRA_RECOVERY);

        File file = new File(Environment.getDataDirectory().getAbsolutePath() + "/data/" + getPackageName() + "/cache/", DigestUtils.sha256Hex(recovery.getDownloadUrl()));
        
        try {
            copyURLToFile(recovery.getDownloadUrl(), file, recovery);
        } catch (IOException e) {
            e.printStackTrace();
        }
        synchronized(sPendingList) {
            sPendingList.remove(recovery.getDownloadUrl());
        }
    }
    
    public void copyURLToFile(String source, File destination, Recovery recovery) throws IOException {
        
        URLConnection urlConnection = new URL(source).openConnection();
        InputStream input = urlConnection.getInputStream();
        int contentLength = urlConnection.getContentLength();
        
        try {
            FileOutputStream output = FileUtils.openOutputStream(destination);
            try {
                byte[] buffer = new byte[1024 * 4];
                long count = 0;
                int n = 0;
                
                int currentProgress = 0;
                Intent intent = new Intent(BROADCAST_PROGRESS_UPDATE);
                intent.putExtra(EXTRA_RECOVERY, recovery);
                intent.putExtra(EXTRA_META, true);
                while (-1 != (n = input.read(buffer))) {
                    output.write(buffer, 0, n);
                    count += n;
                    
                    int progress = (int) (count * 100 / contentLength);
                    if (progress > currentProgress) {
                        currentProgress = progress;
                        intent.putExtra(EXTRA_PROGRESS, currentProgress);
                        sendBroadcast(intent);
                    }
                }
            } finally {
                IOUtils.closeQuietly(output);
            }
        } finally {
            IOUtils.closeQuietly(input);
        }
    }
}