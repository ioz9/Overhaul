/*
 *  Copyright (c) 2012 Daniel Huckaby
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package com.handlerexploit.overhaul.services;

import static com.handlerexploit.overhaul.utils.DownloadUtils.getDownloadPath;
import static com.handlerexploit.overhaul.utils.DownloadUtils.updateProgress;

import java.io.File;
import java.util.ArrayList;
import java.util.List;

import android.app.IntentService;
import android.content.Intent;

import com.handlerexploit.overhaul.models.Recovery;
import com.handlerexploit.overhaul.utils.FileManager;
import com.handlerexploit.overhaul.utils.FileManager.OnProgressUpdatedListener;

public class DownloadService extends IntentService {
    
    public static final String EXTRA_RECOVERY = "recovery";
    public static final String EXTRA_PROGRESS = "progress";
    public static final String EXTRA_STATUS = "status";
    
    private static List<String> sPendingDownloads = new ArrayList<String>();
    
    public static enum Status {
        PENDING,
        DOWNLOADING,
        COMPLETE,
        ERROR;
    }

    public DownloadService() {
        super(DownloadService.class.getSimpleName());
    }
    
    @Override
    public void onStart(Intent intent, int startId) {
        Recovery recovery = (Recovery) intent.getSerializableExtra(EXTRA_RECOVERY);

        synchronized (sPendingDownloads) {
            sPendingDownloads.add(recovery.toString());
        }
        
        updateProgress(this, recovery, 0, Status.PENDING);
        super.onStart(intent, startId);
    }

    @Override
    protected void onHandleIntent(Intent intent) {
        final Recovery recovery = (Recovery) intent.getSerializableExtra(EXTRA_RECOVERY);

        String source = recovery.getDownloadUrl();
        File destination = getDownloadPath(recovery);
        
        FileManager.getInstance().copyURLToFileOnExpiration(source, destination, new OnProgressUpdatedListener() {

            @Override
            public void onProgressUpdate(int progress) {
                updateProgress(DownloadService.this, recovery, progress, Status.DOWNLOADING);
            }
        });
        
        synchronized (sPendingDownloads) {
            sPendingDownloads.remove(recovery.toString());
        }

        updateProgress(this, recovery, 0, destination.exists() ? Status.COMPLETE : Status.ERROR);
    }

    public static boolean isPending(Recovery recovery) {
        synchronized (sPendingDownloads) {
            return sPendingDownloads.contains(recovery.toString());
        }
    }
}