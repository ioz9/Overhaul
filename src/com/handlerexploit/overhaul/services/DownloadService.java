/*
 *  Copyright (c) 2012 Daniel Huckaby
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package com.handlerexploit.overhaul.services;

import java.io.File;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLEncoder;
import java.util.ArrayList;
import java.util.List;

import org.apache.commons.codec.copy.digest.DigestUtils;

import android.app.IntentService;
import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.os.Environment;
import android.support.v4.content.LocalBroadcastManager;

import com.handlerexploit.common.utils.FileManager;
import com.handlerexploit.common.utils.FileManager.OnProgressUpdatedListener;

public class DownloadService extends IntentService {
    
    private static final String EXTRA_PROGRESS = "progress";
    private static final String EXTRA_STATUS = "status";
    private static final String EXTRA_SOURCE = "source";

    private static List<String> sPendingDownloads = new ArrayList<String>();
    
    public static void copyURLToLocalStorageInBackground(Context context, String source) {
        if (!quietNotify(context, source)) {
            Intent intent = new Intent(context, DownloadService.class);
            intent.putExtra(EXTRA_SOURCE, source);
            context.startService(intent);
        }
    }
    
    public static void registerOnStatusChangeListener(Context context, OnStatusChangeListener listener) {
        String source = listener.source;
        IntentFilter intentFilter = new IntentFilter();
        intentFilter.addAction(source);
        LocalBroadcastManager.getInstance(context).registerReceiver(listener, intentFilter);
        quietNotify(context, source);
    }
    
    public static void unregisterOnStatusChangeListener(Context context, OnStatusChangeListener listener) {
        LocalBroadcastManager.getInstance(context).unregisterReceiver(listener);
    }
    
    public static enum Status {
        PENDING,
        DOWNLOADING,
        COMPLETE,
        ERROR;
    }

    public DownloadService() {
        super(DownloadService.class.getSimpleName());
    }
    
    @Override
    public void onStart(Intent intent, int startId) {
        String source = intent.getStringExtra(EXTRA_SOURCE);
        
        if (source == null) {
            throw new RuntimeException("source == null");
        }

        synchronized (sPendingDownloads) {
            sPendingDownloads.add(source);
        }
        
        notifyStatusChange(this, source, 0, Status.PENDING);
        super.onStart(intent, startId);
    }

    @Override
    protected void onHandleIntent(Intent intent) {
        final String source = intent.getStringExtra(EXTRA_SOURCE);
        final File destination = getDownloadPath(this, source);
        
        FileManager.getInstance().copyURLToFileOnExpiration(source, destination, new OnProgressUpdatedListener() {

            @Override
            public void onProgressUpdate(int progress) {
                notifyStatusChange(DownloadService.this, source, progress, Status.DOWNLOADING);
            }
        });
        
        synchronized (sPendingDownloads) {
            sPendingDownloads.remove(source);
        }

        notifyStatusChange(this, source, 0, destination.exists() ? Status.COMPLETE : Status.ERROR);
    }
    
    private static boolean quietNotify(Context context, String source) {
        synchronized (sPendingDownloads) {
            if (getDownloadPath(context, source).exists()) {
                notifyStatusChange(context, source, 0, Status.COMPLETE);
                return true;
            } else if (sPendingDownloads.contains(source)) {
                notifyStatusChange(context, source, 0, Status.PENDING);
                return true;
            }
        }
        return false;
    }
    
    private static void notifyStatusChange(Context context, String source, int progress, Status status) {
        Intent intent = new Intent(source);
        intent.putExtra(DownloadService.EXTRA_PROGRESS, progress);
        intent.putExtra(DownloadService.EXTRA_STATUS, status);
        LocalBroadcastManager.getInstance(context).sendBroadcast(intent);
    }
    
    @SuppressWarnings("deprecation")
    private static File getDownloadPath(Context context, String source) {
        String downloadDirectory = Environment.getExternalStorageDirectory().getAbsolutePath() + "/Download/";
        try {
            URL url = new URL(source);
            String newpath = url.getPath().replace('\\', '/');
            int start = newpath.lastIndexOf("/");
            if (start == -1) {
                start = 0;
            } else {
                start = start + 1;
            }
            String fileName = newpath.substring(start, newpath.length());
            int i = fileName.lastIndexOf('.');
            if (i != -1) {
                String extention = fileName.substring(i, fileName.length());
                String hash = DigestUtils.sha256Hex(source).substring(0, 10);
                fileName = fileName.replace(extention, "-" + hash + extention);
            }
            return new File(downloadDirectory, URLEncoder.encode(fileName));
        } catch (MalformedURLException e) {
            e.printStackTrace();
        }
        return null;
    }

    public static abstract class OnStatusChangeListener extends BroadcastReceiver {
        
        private String source;
        
        public OnStatusChangeListener(String source) {
            this.source = source;
        }

        @Override
        public void onReceive(Context context, Intent intent) {
            Status status = (Status) intent.getSerializableExtra(EXTRA_STATUS);
            Integer progress = intent.getIntExtra(EXTRA_PROGRESS, 0);
            onStatusChange(status, progress);
        }
        
        public abstract void onStatusChange(Status status, int progress);
    }
}