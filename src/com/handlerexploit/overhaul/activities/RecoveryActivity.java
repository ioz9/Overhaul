/*
 *  Copyright (c) 2012 Daniel Huckaby
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package com.handlerexploit.overhaul.activities;

import java.util.concurrent.TimeoutException;

import android.graphics.Bitmap;
import android.os.AsyncTask;
import android.os.Bundle;
import android.support.v4.app.FragmentActivity;
import android.view.View;
import android.view.View.OnClickListener;
import android.widget.Button;
import android.widget.ImageView;
import android.widget.ProgressBar;
import android.widget.TextView;
import android.widget.Toast;

import com.handlerexploit.overhaul.R;
import com.handlerexploit.overhaul.fragments.DeviceFragment;
import com.handlerexploit.overhaul.models.Recovery;
import com.handlerexploit.overhaul.services.DownloadService;
import com.handlerexploit.overhaul.services.DownloadService.OnStatusChangeListener;
import com.handlerexploit.overhaul.services.DownloadService.Status;
import com.handlerexploit.prime.utils.ImageManager;
import com.handlerexploit.prime.utils.ImageManager.OnImageReceivedListener;
import com.stericson.RootTools.RootTools;

public class RecoveryActivity extends FragmentActivity {

    private OnStatusChangeListener mOnStatusChangeListener;

    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_recovery);
        
        Bundle extras = getIntent().getExtras();
        final Recovery recovery = (Recovery) extras.getParcelable(DeviceFragment.EXTRA_RECOVERY);

        TextView title = (TextView) findViewById(R.id.title);
        title.setText(recovery.getTitle().toUpperCase());
        
        TextView description = (TextView) findViewById(R.id.description);
        description.setText(recovery.getDescription());
        
        final ProgressBar downloadProgress = (ProgressBar) findViewById(R.id.downloadProgress);
        downloadProgress.setMax(100);
        
        final Button installButton = (Button) findViewById(R.id.install);
        installButton.setOnClickListener(new OnClickListener() {
            
            @Override
            public void onClick(View v) {
                new InstallTask().execute(recovery);
            }
        });
        
        final Button downloadButton = (Button) findViewById(R.id.download);
        downloadButton.setOnClickListener(new OnClickListener() {
            
            @Override
            public void onClick(View v) {
                DownloadService.copyURLToLocalStorageInBackground(getBaseContext(), recovery.getDownloadUrl());
            }
        });

        ImageManager.getInstance(this).get(recovery.getThumbnailIconUrl(), new OnImageReceivedListener() {
            
            @Override
            public void onImageReceived(String source, Bitmap bitmap) {
                ImageView icon = (ImageView) findViewById(R.id.icon);
                icon.setImageBitmap(bitmap);
            }
        });
        
        mOnStatusChangeListener = new OnStatusChangeListener(recovery.getDownloadUrl()) {

            @Override
            public void onStatusChange(Status status, int progress) {
                if (downloadButton.isEnabled()) {
                    downloadButton.setEnabled(false);
                }
                
                if (installButton.isEnabled()) {
                    installButton.setEnabled(false);
                }
                
                if (downloadProgress.getVisibility() != View.VISIBLE) {
                    downloadProgress.setVisibility(View.VISIBLE);
                }
                
                switch (status) {
                case PENDING:
                    if (!downloadProgress.isIndeterminate()) {
                        downloadProgress.setIndeterminate(true);
                        downloadProgress.invalidate();
                    }
                    break;
                case DOWNLOADING:
                    if (downloadProgress.isIndeterminate()) {
                        downloadProgress.setIndeterminate(false);
                        downloadProgress.invalidate();
                    }
                    downloadProgress.setProgress(progress);
                    break;
                case ERROR:
                    downloadProgress.setVisibility(View.GONE);
                    getWindow().getDecorView().invalidate();
                    if (!downloadButton.isEnabled()) {
                        downloadButton.setEnabled(true);
                    }
                    Toast.makeText(getBaseContext(), "An error occured while downloading " + recovery.getTitle() + "!", Toast.LENGTH_SHORT).show();
                    break;
                case COMPLETE:
                    downloadProgress.setVisibility(View.GONE);
                    getWindow().getDecorView().invalidate();
                    if (!installButton.isEnabled()) {
                        installButton.setEnabled(true);
                    }
                    break;
                }
            }
        };
    }

    @Override
    public void onResume() {
        super.onResume();
        DownloadService.registerOnStatusChangeListener(getBaseContext(), mOnStatusChangeListener);
    }
    
    @Override
    public void onPause() {
        super.onPause();
        DownloadService.unregisterOnStatusChangeListener(getBaseContext(), mOnStatusChangeListener);
    }
    
    private static class InstallTask extends AsyncTask<Recovery, Void, Boolean> {

        @Override
        protected Boolean doInBackground(Recovery... params) {
            if (RootTools.isRootAvailable()) {
                try {
                    if (RootTools.isAccessGiven()) {
                        // TODO Add installation process here
                        return true;
                    }
                } catch (TimeoutException e) {
                    e.printStackTrace();
                }
            }
            return false;
        }
    }
}