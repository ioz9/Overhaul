/*
 *  Copyright (c) 2012 Daniel Huckaby
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package com.handlerexploit.overhaul.utils;

import java.io.File;
import java.io.IOException;
import java.io.InputStream;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import android.content.Context;

import com.handlerexploit.common.utils.FileManager;
import com.handlerexploit.internal.apache.FileUtils;
import com.handlerexploit.internal.apache.IOUtils;
import com.handlerexploit.overhaul.activities.DevicesActivity.Device;
import com.handlerexploit.overhaul.models.ExtendedDevice;
import com.handlerexploit.overhaul.models.Recovery;

public class Parser {
    
    private static final boolean DEBUGGING = true;

    private Context mContext;

    public Parser(Context context) {
        mContext = context;
    }
    
    /**
     * Return a fully inflated {@link ExtendedDevice} directly associated with
     * the provided {@link Device}.
     */
    public ExtendedDevice requestExtendedDevice(Device device) {
        ExtendedDevice extendedDevice = new ExtendedDevice(device);
        try {
            
            String rawJson;
            if (DEBUGGING) {
                InputStream assetInputStream = mContext.getAssets().open(device.getAssetName());
                rawJson = IOUtils.toString(assetInputStream);
            } else {
                String source = extendedDevice.getUrl();
                File destination = FileManager.getFileDestination(mContext, source);
                FileManager.getInstance().copyURLToFileOnExpiration(source, destination);
                rawJson = FileUtils.readFileToString(destination);
            }

            JSONObject root = new JSONObject(rawJson);
            JSONArray recoverylist = root.getJSONArray("recoverylist");
            for (int i = 0; i < recoverylist.length(); i++) {
                JSONObject jsonObject = recoverylist.getJSONObject(i);
                
                Recovery recovery = new Recovery();
                recovery.setTitle(jsonObject.getString("title"));
                recovery.setDescription(jsonObject.getString("desc"));
                recovery.setDownloadUrl(jsonObject.getString("url"));
                recovery.setThumbnailIconUrl(jsonObject.getString("icon_url"));

                extendedDevice.addRecovery(recovery);
            }
        } catch (IOException e) {
            e.printStackTrace();
        } catch (JSONException e) {
            e.printStackTrace();
        }
        return extendedDevice;
    }
}