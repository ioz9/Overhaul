/*
 *  Copyright (c) 2012 Daniel Huckaby
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package com.handlerexploit.overhaul.adapters;

import java.lang.ref.WeakReference;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import android.os.Bundle;
import android.support.v4.app.Fragment;
import android.support.v4.app.FragmentActivity;
import android.support.v4.app.FragmentStatePagerAdapter;
import android.support.v4.view.ViewPager;
import android.support.v4.view.ViewPager.OnPageChangeListener;
import android.view.ViewGroup;

import com.handlerexploit.overhaul.widgets.PagerHeader;
import com.handlerexploit.overhaul.widgets.PagerHeader.OnHeaderClickListener;

public class PagerAdapter extends FragmentStatePagerAdapter implements OnPageChangeListener, OnHeaderClickListener {

    private Map<Integer, WeakReference<Fragment>> mWeakFragmentMap = new HashMap<Integer, WeakReference<Fragment>>();
    
    private List<Holder> mHolderList = new ArrayList<Holder>();
    
    private FragmentActivity mFragmentActivity;
    
    private ViewPager mViewPager;
    
    private PagerHeader mPagerHeader;

    public PagerAdapter(FragmentActivity fragmentActivity, ViewPager viewPager, PagerHeader pagerHeader) {
        super(fragmentActivity.getSupportFragmentManager());
        
        viewPager.setAdapter(this);
        viewPager.setOnPageChangeListener(this);
        pagerHeader.setOnHeaderClickListener(this);
        
        this.mFragmentActivity = fragmentActivity;
        this.mViewPager = viewPager;
        this.mPagerHeader = pagerHeader;
    }

    public void add(Class<? extends Fragment> className, Bundle params, String label) {
        Holder holder = new Holder();
        holder.className = className.getName();
        holder.params = params;

        int position = mHolderList.size();
        mHolderList.add(position, holder);
        mPagerHeader.add(position, label);
        notifyDataSetChanged();
    }
    
    /**
     * Return the Fragment instance associated with a specified position.
     */
    public Fragment getFragment(int position) {
        WeakReference<Fragment> weakFragment = mWeakFragmentMap.get(position);
        if (weakFragment != null && weakFragment.get() != null) {
            return weakFragment.get();
        } else {
            return getItem(position);
        }
    }

    @Override
    public Fragment getItem(int position) {
        Holder currentHolder = mHolderList.get(position);
        Fragment fragment = Fragment.instantiate(mFragmentActivity, currentHolder.className, currentHolder.params);

        WeakReference<Fragment> weakFragment = mWeakFragmentMap.get(position);
        if (weakFragment != null) {
            weakFragment.clear();
        }
        mWeakFragmentMap.put(position, new WeakReference<Fragment>(fragment));

        return fragment;
    }

    @Override
    public void destroyItem(ViewGroup container, int position, Object object) {
        super.destroyItem(container, position, object);
        WeakReference<Fragment> weakFragment = mWeakFragmentMap.get(position);
        if (weakFragment != null) {
            weakFragment.clear();
        }
    }

    @Override
    public int getCount() {
        return mHolderList.size();
    }

    @Override
    public void onPageScrollStateChanged(int arg0) {
        // Ignore
    }

    @Override
    public void onPageScrolled(int position, float positionOffset, int positionOffsetPixels) {
        mPagerHeader.setPosition(position, positionOffset, positionOffsetPixels);
    }

    @Override
    public void onPageSelected(int position) {
        mPagerHeader.setDisplayedPage(position);
    }

    @Override
    public void onHeaderClicked(int position) {
        // Ignore
    }

    @Override
    public void onHeaderSelected(int position) {
        mViewPager.setCurrentItem(position);
    }
    
    private class Holder {
        String className;
        Bundle params;
    }
}